title: Intro of Interesting Intrigue

explain: |
	Welcome to Logic Online!

	Here you can complete exercises to learn deduction.
	You will write statements in a computerized format,
	and apply rules to get new statements.

	Our first statement type is called the *atom*.
	It looks like this:

		x

	Pretty simple, huh?
	It represents a 'simple' statement with no interesting parts.
	There are many atoms: `iAmTheCoolest`, `deductionIsFun`, `asdfghjkl`.
	(Atom names can only use letters.)

	To use an atom, first you'll have to say it exists.

		declare x

	Then you can state that it is true by simply writing it.

		x

	You can label your statement like so:

		myStatement: x

	We can refer to the line as `myStatement` later on.

	Our first rule is called `repeat`.
	Put simply, every time we've said something, we can repeat it.
	This is the most common form of argument used in real life.

	Let's see it in action:

		sayItOnce: it
		sayItAgain: it	|repeat sayItOnce

	The symbol `|` distinguishes the statement from its *justification*.
	The justification applies the rule `repeat` to the line labeled `first`.
	Not every line can be justified.
	If the justification is missing, the line is a *premise*.
	You shouldn't be writing any premises;
	every line you write should be justified.


	Now you're ready for **your first exercise**.
	You'll have to fill in the middle of the proof shown below.
	The top and bottom parts can't be modified.

	If you get stuck, press the
	<i class='fa fa-puzzle-piece'/> button at the top of the page.

	Press the <i class='fa fa-check'/> button when you're done.

setup: |
	\ This describes repeat within our language.
	\ Don't worry how it works just yet.
	repeat a: a â‡’
		a

	\ This says that x is a Boolean we can refer to.
	declare x

	\ Here is a premise.
	\ We give it the *label* "yesX" so we can refer to it later.
	yesX: x

	\ Now let's use that premise.
	\ This line is *justified* by the rule "repeat" applied to the line "yesX".
	revengeOfX: x	|repeat yesX

answer: |
	xRidesAgain: x	|repeat yesX

finish: |
	\ You'll have to make a line labeled "xRidesAgain", or this will fail.
	x	|repeat xRidesAgain

hint: |
	The answer is `xRidesAgain: x	|repeat yesX`.
