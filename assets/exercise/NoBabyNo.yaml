title: No Baby No

explain: |
	A slightly more complex rule than `can't` is `can'tNot`:

		unlessA: ¬a ⇒
			⊥
		a	|can'tNot unlessA

	This allows you to *remove* negations, something `can't` couldn't do.

	You'll find that `can'tNot` is *the* go-to method to use.
	When trying to prove something, imagine it not being the case.

	Now for today's exercise:
		dealing with two negations in a row; statements like `¬¬a`.

	Often people make statements like "Oh, well, see, I wasn't *not* satisfied..."
	These people are too wordy, and you can prove it!
	They could have just said "I was satisfied!"

	(By the way, this is called
		[Double Negation Elimination](
		http://www.proofwiki.org/wiki/Double_Negation/Double_Negation_Elimination).)

setup: |
	contradiction a: a, ¬a ⇒
		⊥
	can'tNot a: ¬a → ⊥ ⇒
		a

	declare iWasSatisfied

	wordy: ¬¬iWasSatisfied

answer: |
	unless: ¬iWasSatisfied ⇒
		⊥			|contradiction unless#1 wordy
	iWasSatisfied	|can'tNot unless

finish: |
	assert proven: iWasSatisfied

hint: |
	When all you have is `can'tNot`,
		everything begins to look like its negation leads to a contradiction.

	In other words, there's only one way to do it!

		unless: ¬iWasSatisfied ⇒
			⊥	|_

		iWasSatisfied	|_

